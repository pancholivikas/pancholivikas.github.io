{"version":3,"sources":["webpack:///./app/index.tsx","webpack:///./app/components/table-component/table-component.tsx","webpack:///./app/config/stock-grid-config.ts","webpack:///./app/containers/App/index.tsx","webpack:///./app/actions/store-actions.ts","webpack:///./app/models/stock-model.ts","webpack:///./app/services/web-socket-service.ts","webpack:///./app/services/logger-service.ts","webpack:///./app/reducers/stock-data-reducer.ts","webpack:///./app/reducers/index.ts","webpack:///./app/store/index.ts","webpack:///./main.tsx","webpack:///./app/components/table-component/table-style.css?cb61"],"names":["module","__webpack_require__","d","__webpack_exports__","App","react__WEBPACK_IMPORTED_MODULE_0__","react_router__WEBPACK_IMPORTED_MODULE_1__","react_router__WEBPACK_IMPORTED_MODULE_2__","app_containers_App__WEBPACK_IMPORTED_MODULE_3__","react_hot_loader__WEBPACK_IMPORTED_MODULE_4__","Object","path","component","table_component_TableComponent","_super","TableComponent","props","context","_this","call","this","getTableHeader","data","map","item","index","react","key","getTableRows","diff","className","table_style","name","trim","price","__extends","prototype","render","colDef","StockGridConfig","App_App","App_extends","stockData","gridData","keys","__decorate","es","state","ownProps","store_actions_StockActions","Stock","historicData","updateStock","stock","isPriceSameAs","getPriceDiff","concat","addPriceToHistory","push","getName","getPrice","getHistoricData","web_socket_service_WebSocketService","WebSocketService","url","connection","WebSocket","startConnection","Promise","resolve","reject","onopen","onerror","err","onMessage","subject","Subject","then","onmessage","next","JSON","parse","error","LoggerService","console","log","StockActions","Type","loadStockDataSuccess","type","LOAD_STOCK_DATA","loadStoreData","dispatch","subscribe","forEach","_a","handleUpdateMessage","stockReducer","handleActions","stock_data_reducer_a","action","assign","prevState","hasOwnProperty","existingStock","newObj","rootReducer","redux","initialState","middleware","store","main_history","history_es","main_store","redux_thunk_es","react_dom","Router","history","app","document","getElementById","exports","table","backgroundRed","backgroundBlue","backgroundWhite"],"mappings":"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","file":"app.89c3683545dc81205274.js","sourcesContent":["import * as React from 'react';\r\nimport { Route, Switch } from 'react-router';\r\nimport { App as StockDashBoard } from 'app/containers/App';\r\nimport { hot } from 'react-hot-loader';\r\n\r\nexport const App = hot(module)(() => (\r\n  <Switch>\r\n    <Route path=\"/\" component={StockDashBoard} />\r\n  </Switch>\r\n));\r\n","import * as React from 'react';\r\nimport * as Styles from './table-style.css';\r\nimport { Stock } from 'app/models';\r\n\r\nexport interface ITableProps {\r\n    data: Array<any>;\r\n    colDef: Array<any>;\r\n}\r\n\r\nexport class TableComponent extends React.Component<ITableProps> {\r\n\r\n    constructor(props: ITableProps, context?: any) {\r\n        super(props, context);\r\n    }\r\n\r\n    getTableHeader = (data: Array<string>) => {\r\n        const tableHeader = data.map((item, index) => {\r\n            return (\r\n                <td key={index}>{item}</td>\r\n            );\r\n        });\r\n        return tableHeader;\r\n    }\r\n\r\n    getTableRows = (data: Array<Stock>) => {\r\n        const tableBody = data.map((item: Stock) => {\r\n            const diff = item.diff;\r\n            const className = (diff > 0)\r\n                ? Styles.backgroundBlue\r\n                : (diff < 0)\r\n                    ? Styles.backgroundRed\r\n                    : Styles.backgroundWhite;\r\n\r\n            return (\r\n                <tr key={item.name.trim()}>\r\n                    <td>{item.name}</td>\r\n                    <td className={className}>{item.price}</td>\r\n                </tr>\r\n            );\r\n        });\r\n        return tableBody;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <table className={`${Styles.table} table`}>\r\n                <thead>\r\n                    <tr>\r\n                        {this.getTableHeader(this.props.colDef)}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {this.getTableRows(this.props.data)}\r\n                </tbody>\r\n            </table>\r\n        )\r\n    }\r\n\r\n}\r\n","export interface IStockGridConfig {\r\n    colDef: Array<string>;\r\n}\r\n\r\nexport const StockGridConfig: IStockGridConfig = {\r\n    colDef: [\r\n        'Stock Name',\r\n        'Stock Price'\r\n    ]\r\n};","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { RootState } from 'app/reducers';\r\nimport { IStockDataModel } from 'app/models';\r\nimport { TableComponent } from '../../components'\r\nimport { StockGridConfig } from '../../config'\r\n\r\nexport namespace App {\r\n  export interface Props extends RouteComponentProps<void> {\r\n    stockData: IStockDataModel;\r\n  }\r\n}\r\n\r\n@connect(\r\n  (state: RootState, ownProps): Pick<App.Props, 'stockData'> => {\r\n    return { stockData: state.stockData ? state.stockData : {} };\r\n  }\r\n)\r\nexport class App extends React.Component<App.Props> {\r\n\r\n  constructor(props: App.Props, context?: any) {\r\n    super(props, context);\r\n  }\r\n\r\n  render() {\r\n    const { stockData } = this.props;\r\n    const gridData = Object.keys(stockData).map(data => stockData[data]);\r\n    return (\r\n      <div className={'container'}>\r\n        <TableComponent data={gridData ? gridData : []} colDef={StockGridConfig.colDef} />\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n","import * as Redux from 'redux';\r\nimport { WebSocketService, LoggerService } from 'app/services';\r\n\r\nexport interface IStockAction {\r\n    type: StockActions.Type;\r\n    data: Array<Array<[string, number]>>;\r\n}\r\n\r\nexport namespace StockActions {\r\n    export enum Type {\r\n        LOAD_STOCK_DATA = 'LOAD_STOCK_DATA'\r\n    }\r\n\r\n    export function loadStockDataSuccess(data: any): IStockAction {\r\n        return {\r\n            data,\r\n            type: Type.LOAD_STOCK_DATA\r\n        }\r\n    }\r\n\r\n    export const loadStoreData = () => {\r\n        return (dispatch: Redux.Dispatch) => {\r\n            const connect = new WebSocketService('ws://stocks.mnet.website');\r\n            connect.onMessage()\r\n                .subscribe(data => {\r\n                    handleUpdateMessage(data);\r\n                    dispatch(loadStockDataSuccess(data));\r\n                });\r\n        }\r\n    }\r\n\r\n    function handleUpdateMessage(data: Array<Array<[string, number]>>) {\r\n        data.forEach(([name, price]) => LoggerService(`${name}: ${price}`));\r\n      }\r\n}\r\n\r\nexport type StockActions = Omit<typeof StockActions, 'Type'>;\r\n","export interface IStockDataModel {\r\n    [key:string]: IStockModel;\r\n}\r\n\r\nexport interface IStockModel {\r\n    name: string;\r\n    price: number;\r\n    diff: number;\r\n    historicData: Array<number>;\r\n}\r\n\r\nexport class Stock {\r\n    name: string;\r\n    price: number;\r\n    diff: number;\r\n    historicData: Array<number>;\r\n\r\n    constructor(name: string, price: number, diff: number, historicData: Array<number>) {\r\n        this.name = name;\r\n        this.price = price;\r\n        this.diff = diff;\r\n        this.historicData = historicData;\r\n    }\r\n\r\n    public updateStock(stock: Stock, price: number): Stock {\r\n        return new Stock(\r\n            stock.name,\r\n            price,\r\n            this.isPriceSameAs(price) ? 0 : this.getPriceDiff(price),\r\n            stock.historicData.concat(price)\r\n        );\r\n    }\r\n\r\n    public addPriceToHistory(price: number) {\r\n        this.historicData.push(price);\r\n    }\r\n\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public getPrice(): number {\r\n        return this.price;\r\n    }\r\n\r\n    public getHistoricData(): Array<number> {\r\n        return this.historicData;\r\n    }\r\n\r\n    public getPriceDiff(price: number): number {\r\n        return price - this.price;\r\n    }\r\n\r\n    public isPriceSameAs(price: number):boolean {\r\n        return this.price === price;\r\n    }\r\n}","import * as Rx from \"rxjs\";\r\n\r\nexport class WebSocketService{\r\n    connection: WebSocket;\r\n    constructor(url: string) {\r\n        this.connection = new WebSocket(url);\r\n    }\r\n\r\n    startConnection(): Promise<WebSocket> {\r\n        return new Promise((resolve, reject) => {\r\n            this.connection.onopen = () => {\r\n                resolve(this.connection);\r\n            };\r\n            this.connection.onerror = (err) => {\r\n                reject(err);\r\n            };\r\n        });\r\n    }\r\n\r\n    onMessage(): Rx.Subject<any> {\r\n        const subject = new Rx.Subject();\r\n        this.startConnection().then(connection => {\r\n            this.connection = connection;\r\n            connection.onmessage = (data) => {\r\n                subject.next(JSON.parse(data.data));\r\n            }\r\n            connection.onerror = (err) => {\r\n                subject.error(err);\r\n            }\r\n        });\r\n        return subject;\r\n    }\r\n}","export const LoggerService = (data: string) => {\r\n    console.log(data);\r\n}","import { handleActions } from 'redux-actions';\r\nimport { RootState } from './state';\r\nimport { IStockDataModel, Stock } from '../models/stock-model';\r\nimport { StockActions } from 'app/actions/store-actions';\r\n\r\nconst initialState: RootState.StockData = {\r\n};\r\n\r\nfunction addUpdateStock(prevState: IStockDataModel, data: Array<[string, number]>) {\r\n    data.forEach((item: [string, number]) => {\r\n        if (prevState.hasOwnProperty(item[0])) {\r\n            const existingStock: Stock = prevState[item[0]] as Stock;\r\n            const newObj = existingStock.updateStock(existingStock, item[1]);\r\n            prevState = Object.assign({}, prevState, { [item[0]]: newObj });\r\n        } else {\r\n            prevState[item[0]] = new Stock(\r\n                item[0],\r\n                item[1],\r\n                0,\r\n                [item[1]]\r\n            );\r\n        }\r\n    });\r\n    return prevState;\r\n}\r\n\r\nexport const stockReducer = handleActions<RootState.StockData, IStockDataModel>(\r\n    {\r\n        [StockActions.Type.LOAD_STOCK_DATA]: (state, action: any) => {\r\n            return Object.assign({},\r\n                state,\r\n                addUpdateStock(\r\n                    Object.assign({}, state) as IStockDataModel,\r\n                    action.data as Array<[string, number]>\r\n                )\r\n            );\r\n        }\r\n    },\r\n    initialState\r\n);","import { combineReducers } from 'redux';\r\nimport { RootState } from './state';\r\nimport { stockReducer } from './stock-data-reducer';\r\nexport { RootState };\r\n\r\nexport const rootReducer = combineReducers<RootState>({\r\n  stockData: stockReducer as any\r\n});\r\n","import { Store, createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { RootState, rootReducer } from 'app/reducers';\r\nimport { StockActions } from 'app/actions/store-actions';\r\n\r\nexport function configureStore(initialState?: RootState): Store<RootState> {\r\n  let middleware = applyMiddleware(thunk);\r\n\r\n  const store = createStore(rootReducer as any, initialState as any, middleware) as Store<\r\n    RootState\r\n  >;\r\n  \r\n  // @ts-ignore\r\n  store.dispatch(StockActions.loadStoreData());\r\n\r\n  return store;\r\n}\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createBrowserHistory } from 'history';\r\nimport { configureStore } from 'app/store';\r\nimport { Router } from 'react-router';\r\nimport { App } from './app';\r\n\r\n// prepare store\r\nconst history = createBrowserHistory();\r\nconst store = configureStore();\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Router history={history}>\r\n      <App />\r\n    </Router>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"_3p9iU\",\"backgroundRed\":\"_272Wt\",\"backgroundBlue\":\"_2WHqE\",\"backgroundWhite\":\"_3fsdO\"};"],"sourceRoot":""}